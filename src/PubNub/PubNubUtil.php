<?php

namespace PubNub;


use PubNub\Exceptions\PubNubBuildRequestException;
use PubNub\Exceptions\PubNubValidationException;

class PubNubUtil
{
    /**
     * @param string $basePath generated by BasePathManager
     * @param string $path
     * @param array $params query elements
     * @return string url
     */
    public static function buildUrl($basePath, $path, $params)
    {
        return $basePath . $path . "?" . http_build_query($params);
    }

    public static function urlWrite($value)
    {
        return static::urlEncode(static::writeValueAsString($value));
    }

    public static function urlEncode($value)
    {
        return rawurlencode($value);
    }

    public static function writeValueAsString($value)
    {
        if (gettype($value) == 'string') {
            return "\"" . $value . "\"";
        } else {
            $res = json_encode($value);

            if (json_last_error()) {
                throw new PubNubBuildRequestException("Value serialization error: " . json_last_error_msg());
            }

            return $res;
        }
    }

    /**
     * @param array $channels
     * @return string
     */
    public static function joinChannels($channels)
    {
        if (count($channels) == 0) {
            return ",";
        } else {
            $encodedChannels = [];

            foreach ($channels as $ch) {
                $encodedChannels[] = urlencode($ch);
            }

            return join(",", $encodedChannels);
        }
    }

    public static function joinItems($items)
    {
        return join(",", $items);
    }


    /**
     * @param $existingItems
     * @param $newItems
     * @return array
     */
    public static function extendArray($existingItems, $newItems)
    {
        if (is_array($newItems)) {
            return array_merge($existingItems, $newItems);
        } else {
            return array_merge($existingItems, static::splitItems($newItems));
        }
    }

    /**
     * @param string $itemsString
     * @return array
     */
    public static function splitItems($itemsString)
    {
        if (strlen($itemsString) == 0) {
            return [];
        } else {
            return explode(",", $itemsString);
        }
    }

    public static function uuid()
    {
        if (function_exists('com_create_guid') === true) {
            return trim(com_create_guid(), '{}');
        } else {
            return sprintf('%04X%04X-%04X-%04X-%04X-%04X%04X%04X', mt_rand(0, 65535), mt_rand(0, 65535),
                mt_rand(0, 65535), mt_rand(16384, 20479), mt_rand(32768, 49151), mt_rand(0, 65535), mt_rand(0, 65535),
                mt_rand(0, 65535));
        }
    }

    public static function preparePamParams($params)
    {
        ksort($params);

        $sortedParams = $params;
        $stringifiedArguments = "";
        $index = 0;

        foreach ($sortedParams as $key => $value) {
            if (is_bool($value)) {
                $value = $value ? "true" : "false";
            }

            if ($index === count($sortedParams) - 1) {
                $stringifiedArguments .= ($key . "=" . self::pamEncode($value));
            } else {
                $stringifiedArguments .= ($key . "=" . self::pamEncode($value) . "&");
            }

            $index++;
        }

        return $stringifiedArguments;
    }

    public static function pamEncode($url)
    {
        $encoded = self::urlEncode($url);

        if (!empty($encoded)) {
            $encoded = str_replace("*", "%2A", $encoded);
            $encoded = str_replace("!", "%21", $encoded);
            $encoded = str_replace("'", "%27", $encoded);
            $encoded = str_replace("(", "%28", $encoded);
            $encoded = str_replace(")", "%29", $encoded);
            $encoded = str_replace("[", "%5B", $encoded);
            $encoded = str_replace("]", "%5D", $encoded);
            $encoded = str_replace("~", "%7E", $encoded);
        }

        return $encoded;
    }

    public static function signSha256($secret, $signInput)
    {
        $result = base64_encode(hash_hmac(
            'sha256',
            utf8_encode($signInput),
            utf8_encode($secret),
            true
        ));

        return $result;
    }
}